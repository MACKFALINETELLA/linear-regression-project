
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_6T0CvovwHniF10N000kLsuA4YW6NF5W
"""


df = pd.read_excel('/content/road_accidents.xlsx')


print("✅ Dataset Loaded Successfully!")
print("Shape of data:", df.shape)
print(df.head())


target = 'severity'


features = [
    'vehicle_speed', 'alcohol_level', 'weather', 'road_surface',
    'vehicle_age', 'time_of_day', 'num_vehicles', 'seatbelt_used', 'driver_age'
]


numeric_cols = ['vehicle_speed', 'alcohol_level', 'vehicle_age', 'num_vehicles', 'driver_age']
categorical_cols = ['weather', 'road_surface', 'time_of_day', 'seatbelt_used']

print("✅ Target and feature columns defined successfully!")




target = 'severity'


features = [
    'vehicle_speed', 'alcohol_level', 'weather', 'road_surface',
    'vehicle_age', 'time_of_day', 'num_vehicles', 'seatbelt_used', 'driver_age'
]


numeric_cols = ['vehicle_speed', 'alcohol_level', 'vehicle_age', 'num_vehicles', 'driver_age']
categorical_cols = ['weather', 'road_surface', 'time_of_day', 'seatbelt_used']

print("✅ Target and feature columns defined successfully!")



num_transformer = Pipeline(steps=[
    ('scaler', StandardScaler())
])


cat_transformer = Pipeline(steps=[
    ('onehot', OneHotEncoder(handle_unknown='ignore', sparse=False))
])


preprocessor = ColumnTransformer(transformers=[
    ('num', num_transformer, numeric_cols),
    ('cat', cat_transformer, categorical_cols)
])


model_pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('model', LinearRegression())
])

print("✅ Model pipeline created successfully!")


from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.linear_model import LinearRegression


for col in numeric_cols:
    df[col] = pd.to_numeric(df[col], errors='coerce')


for col in categorical_cols:
    df[col] = df[col].astype(str).fillna('Unknown')


print("Column dtypes after conversion:")
print(df[numeric_cols + categorical_cols].dtypes)
print("\nSample rows:")
print(df[numeric_cols + categorical_cols].head())


df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].median())


ohe_kwargs = {}
try:
    
    OneHotEncoder(sparse_output=False)
    ohe_kwargs['sparse_output'] = False
except TypeError:
   
    ohe_kwargs['sparse'] = False

cat_transformer = Pipeline(steps=[
    ('onehot', OneHotEncoder(handle_unknown='ignore', **ohe_kwargs))
])

num_transformer = Pipeline(steps=[
    ('scaler', StandardScaler())
])

preprocessor = ColumnTransformer(transformers=[
    ('num', num_transformer, numeric_cols),
    ('cat', cat_transformer, categorical_cols)
], remainder='drop')


model_pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', LinearRegression())
])

print("\n✅ Robust pipeline created. Ready to train.")



model_pipeline.fit(X_train, y_train)


y_pred = model_pipeline.predict(X_test)


mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("✅ Model trained successfully!")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"R² Score: {r2:.2f}")

plt.figure(figsize=(6, 4))
plt.scatter(y_test, y_pred, alpha=0.6)
plt.xlabel("Actual Severity")
plt.ylabel("Predicted Severity")
plt.title("Actual vs Predicted Accident Severity")
plt.grid(True)
plt.show()


X = df[features]
y = df[target]


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


model_pipeline.fit(X_train, y_train)

y_pred = model_pipeline.predict(X_test)


from sklearn.metrics import mean_squared_error, r2_score
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y



X = df[features]
y = df[target]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

model_pipeline.fit(X_train, y_train)

y_pred = model_pipeline.predict(X_test)


from sklearn.metrics import mean_squared_error, r2_score
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("✅ Model trained and evaluated successfully!")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"R² Score: {r2:.2f}")


import matplotlib.pyplot as plt
plt.figure(figsize=(6, 4))
plt.scatter(y_test, y_pred, alpha=0.6, color='blue')
plt.xlabel("Actual Severity")
plt.ylabel("Predicted Severity")
plt.title("Actual vs Predicted Accident Severity")
plt.grid(True)
plt.show()

joblib.dump(model_pipeline, '/content/road_accident_model.pkl')
print("✅ Model saved successfully as 'road_accident_model.pkl'!")


loaded_model = joblib.load('/content/road_accident_model.pkl')

y_pred_loaded = loaded_model.predict(X_test)


from sklearn.metrics import mean_squared_error, r2_score
mse_loaded = mean_squared_error(y_test, y_pred_loaded)
r2_loaded = r2_score(y_test, y_pred_loaded)

print(f"Reloaded Model - MSE: {mse_loaded:.2f}")
print(f"Reloaded Model - R²: {r2_loaded:.2f}")
